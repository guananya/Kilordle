[{"/Users/ananyagupta/Desktop/kilordle/src/index.tsx":"1","/Users/ananyagupta/Desktop/kilordle/src/reportWebVitals.ts":"2","/Users/ananyagupta/Desktop/kilordle/src/App.tsx":"3","/Users/ananyagupta/Desktop/kilordle/src/util/checkValidity.ts":"4","/Users/ananyagupta/Desktop/kilordle/src/util/generateWordlist.ts":"5","/Users/ananyagupta/Desktop/kilordle/src/util/sortByValue.ts":"6","/Users/ananyagupta/Desktop/kilordle/src/components/index.tsx":"7","/Users/ananyagupta/Desktop/kilordle/src/util/seedRandom.ts":"8","/Users/ananyagupta/Desktop/kilordle/src/util/words.ts":"9","/Users/ananyagupta/Desktop/kilordle/src/components/Puzzles.tsx":"10","/Users/ananyagupta/Desktop/kilordle/src/components/Keyboard.tsx":"11","/Users/ananyagupta/Desktop/kilordle/src/components/Puzzle.tsx":"12","/Users/ananyagupta/Desktop/kilordle/src/components/Header.tsx":"13","/Users/ananyagupta/Desktop/kilordle/src/components/EndScreen.tsx":"14","/Users/ananyagupta/Desktop/kilordle/src/util/isYellow.ts":"15"},{"size":500,"mtime":1652248256420,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1652248256421,"results":"18","hashOfConfig":"17"},{"size":3653,"mtime":1652249587514,"results":"19","hashOfConfig":"17"},{"size":147,"mtime":1652248256421,"results":"20","hashOfConfig":"17"},{"size":440,"mtime":1652248256421,"results":"21","hashOfConfig":"17"},{"size":634,"mtime":1652248256421,"results":"22","hashOfConfig":"17"},{"size":241,"mtime":1652248256420,"results":"23","hashOfConfig":"17"},{"size":265,"mtime":1652248256421,"results":"24","hashOfConfig":"17"},{"size":103670,"mtime":1652248256422,"results":"25","hashOfConfig":"17"},{"size":795,"mtime":1652248256420,"results":"26","hashOfConfig":"17"},{"size":1954,"mtime":1652249503079,"results":"27","hashOfConfig":"17"},{"size":1694,"mtime":1652248256420,"results":"28","hashOfConfig":"17"},{"size":687,"mtime":1652250160752,"results":"29","hashOfConfig":"17"},{"size":5682,"mtime":1652248256419,"results":"30","hashOfConfig":"17"},{"size":737,"mtime":1652248256421,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14scp57",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ananyagupta/Desktop/kilordle/src/index.tsx",[],[],"/Users/ananyagupta/Desktop/kilordle/src/reportWebVitals.ts",[],[],"/Users/ananyagupta/Desktop/kilordle/src/App.tsx",["80","81"],[],"import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport { Header, Keyboard, Puzzles, EndScreen } from './components';\nimport { checkValidity } from './util/checkValidity';\nimport { generateWordlist } from './util/generateWordlist';\nimport { sortByValue } from './util/sortByValue';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  background-color: #f7f8f9;\n`;\n\nconst Content = styled.div`\n  max-width: 600px;\n  box-shadow: 4px 4px 40px 4px rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n  margin-bottom: 200px;\n`;\n\nfunction App() {\n  const totalWords = 1000;\n  const [wordlist, setWordlist] = useState(generateWordlist(totalWords));\n  const [guesslist, setGuesslist] = useState<string[]>([]);\n  const [progressHistory, setProgressHistory] = useState<number[]>([]);\n  const [working, setWorking] = useState('');\n\n  const maxGuesses = 1005;\n  const expired = guesslist.length >= maxGuesses;\n\n  function addKey(key: string) {\n    if (key === '-' || key === 'Backspace')\n      setWorking((tmp) => tmp.slice(0, tmp.length - 1));\n    else if (\n      (key === '+' || key === 'Enter') &&\n      working.length === 5 &&\n      checkValidity(working)\n    ) {\n      // lets go.\n      const newGuesslist = guesslist.concat([working]);\n      setGuesslist(newGuesslist);\n      setWorking('');\n      setWordlist(sortByValue(wordlist, newGuesslist));\n      setProgressHistory(\n        progressHistory.concat([totalWords - (wordlist.length - 1)])\n      );\n    } else if (working.length !== 5 && key.length === 1 && key !== ' ') {\n      setWorking((tmp) => tmp + key.toLowerCase());\n    }\n  }\n\n  useEffect(() => {\n    setWordlist(sortByValue(wordlist, guesslist));\n  }, []);\n\n  useEffect(() => {\n    function keyEvent(ev: KeyboardEvent) {\n      addKey(ev.key);\n    }\n    if (!expired) {\n      window.addEventListener('keydown', keyEvent);\n      if (working.length > 5) setWorking((tmp) => tmp.slice(0, 5));\n      return () => window.removeEventListener('keydown', keyEvent);\n    }\n  }, [working]);\n\n  function getUsedLetters() {\n    var letters: string[] = [];\n    guesslist.forEach((word) => {\n      for (var i = 0; i < word.length; i++) {\n        var char = word.charAt(i);\n        if (letters.indexOf(char) === -1) letters.push(char);\n      }\n    });\n    return letters;\n  }\n\n  // const endScreenDemo = true;\n  // useEffect(() => {\n  //   if (endScreenDemo) {\n  //     let fakeProgressHistory = [];\n  //     let progress = 0;\n  //     while (progress < 1000) {\n  //       progress += Math.floor(Math.random() * 10);\n  //       fakeProgressHistory.push(progress);\n  //     }\n  //     setProgressHistory(fakeProgressHistory);\n  //     setWordlist([]);\n  //     setGuesslist(Array(fakeProgressHistory.length).fill('placeholder'));\n  //   }\n  // }, []);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Content>\n          <Header\n            remaining={wordlist.length}\n            guesses={guesslist.length}\n            limit={maxGuesses}\n          />\n          <Puzzles\n            expired={expired}\n            wordlist={wordlist}\n            working={working}\n            guesslist={guesslist}\n          />\n          {wordlist.length === 0 ? (\n            <EndScreen progressHistory={progressHistory} />\n          ) : null}\n          <Keyboard\n            guesses={guesslist.length}\n            remaining={wordlist.length}\n            limit={maxGuesses}\n            expired={expired}\n            onKeyPress={(key) => addKey(key)}\n            usedLetters={getUsedLetters()}\n          />\n        </Content>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/ananyagupta/Desktop/kilordle/src/util/checkValidity.ts",[],[],"/Users/ananyagupta/Desktop/kilordle/src/util/generateWordlist.ts",[],[],"/Users/ananyagupta/Desktop/kilordle/src/util/sortByValue.ts",[],[],"/Users/ananyagupta/Desktop/kilordle/src/components/index.tsx",[],[],"/Users/ananyagupta/Desktop/kilordle/src/util/seedRandom.ts",[],[],"/Users/ananyagupta/Desktop/kilordle/src/util/words.ts",[],[],"/Users/ananyagupta/Desktop/kilordle/src/components/Puzzles.tsx",[],[],"/Users/ananyagupta/Desktop/kilordle/src/components/Keyboard.tsx",[],[],"/Users/ananyagupta/Desktop/kilordle/src/components/Puzzle.tsx",[],[],"/Users/ananyagupta/Desktop/kilordle/src/components/Header.tsx",["82"],[],"import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 8px;\n`;\n\nconst Title = styled.div`\n  font-size: 18px;\n  margin-right: 20px;\n`;\n\nconst Stats = styled.div`\n  font-size: 14px;\n`;\n\nfunction Header({ remaining, guesses, limit }: { remaining: number, guesses: number, limit: number }) {\n  return (\n    <Container>\n      <Title>Kilordle by <a href=\"https://github.com/jonesnxt/kilordle\" target=\"_blank\">jones ft. Lisanya</a></Title>\n      <Stats>Guesses: {guesses}/{limit} | Remaining: {remaining}/1000</Stats>\n    </Container>\n  );\n}\n\nexport default Header;\n","/Users/ananyagupta/Desktop/kilordle/src/components/EndScreen.tsx",["83"],[],"import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nconst ShareButton = styled.button`\n  margin: 10px 0;\n  background-color: #0fb30f;\n  color: white;\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  border-radius: 5px;\n  outline: none;\n  font-size: 1.5em;\n  cursor: pointer;\n  box-shadow: 0 1px 5px 1px rgba(0, 0, 0, 0.1);\n\n  :hover {\n    opacity: 0.6;\n  }\n\n  &:active {\n    color: lightgray;\n  }\n`;\n\nfunction EndScreen({ progressHistory }: { progressHistory: number[] }) {\n  const guesses = progressHistory.length;\n  const [canvasURL, setCanvasURL] = useState('');\n  const canvasResult = useRef<Blob | null>(null);\n\n  const displayWidth = 525;\n  const titleHeight = 20;\n  const displayHeight = 250 + titleHeight;\n  const maxColumns = 50;\n  const actualColumns = Math.min(maxColumns, guesses);\n  const rows = 25;\n\n  const mmts = {\n    // measurements\n    height: displayHeight,\n    nonTitleHeight: displayHeight - titleHeight,\n    width: displayWidth,\n    leftGutter: 30,\n    bottomGutter: 15,\n    margin: 3,\n    lineWidth: 1,\n    fontSize: 10,\n    gridLeftEdge: 0,\n    gridWidth: 0,\n    gridBottomEdge: 0,\n    gridHeight: 0,\n    squareSide: 0,\n    squarePadding: 1,\n  };\n  mmts.gridLeftEdge = mmts.leftGutter + mmts.lineWidth + mmts.margin / 2;\n  mmts.gridBottomEdge = mmts.bottomGutter + mmts.lineWidth;\n  mmts.gridWidth =\n    mmts.width - mmts.leftGutter - mmts.leftGutter / 2 - mmts.margin;\n  mmts.gridHeight = mmts.nonTitleHeight - mmts.gridBottomEdge;\n  mmts.squareSide = mmts.gridHeight / rows;\n\n  // scale adjustment\n  let mmt: keyof typeof mmts;\n  for (mmt in mmts) {\n    mmts[mmt] *= devicePixelRatio * 2;\n  }\n\n  useEffect(() => {\n    const canvas = document.createElement('canvas');\n    if (!canvas) return;\n    canvas.width = mmts.width;\n    canvas.height = mmts.height;\n    const context = canvas.getContext('2d');\n    if (!context) return;\n    console.log('drawing to canvas');\n    console.log('progress history is', progressHistory);\n    // draw background (white)\n    context.fillStyle = '#ffffff';\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    // create margin\n    context.scale(0.95, 0.95);\n    context.translate(0.025 * mmts.width, 0.025 * mmts.height);\n    // create title\n    context.fillStyle = '#000000';\n    context.textAlign = 'center';\n    context.textBaseline = 'top';\n    context.font = `${mmts.fontSize * 1.5}px sans-serif`;\n    context.fillText(\n      `I beat Kilordle in ${guesses} guesses :')`,\n      mmts.width / 2,\n      0\n    );\n    context.translate(0, mmts.fontSize * 1.5);\n    // setup fonts, colors\n    context.font = `${mmts.fontSize}px sans-serif`;\n    // draw numbers\n    context.textBaseline = 'alphabetic';\n    context.textAlign = 'right';\n    context.fillText(\n      '0',\n      mmts.leftGutter - mmts.margin,\n      mmts.nonTitleHeight - mmts.margin\n    );\n    context.textBaseline = 'top';\n    context.fillText('1000', mmts.leftGutter - mmts.margin, mmts.margin);\n    context.textBaseline = 'alphabetic';\n    context.textAlign = 'center';\n    context.fillText(\n      String(guesses),\n      mmts.gridLeftEdge +\n        actualColumns * mmts.squareSide +\n        mmts.squarePadding -\n        mmts.squareSide / 2,\n      mmts.nonTitleHeight - mmts.margin\n    );\n    // draw axes\n    context.fillRect(mmts.leftGutter, 0, mmts.lineWidth, mmts.nonTitleHeight);\n    context.fillRect(\n      mmts.leftGutter / 2,\n      mmts.nonTitleHeight - mmts.bottomGutter,\n      mmts.width - mmts.leftGutter,\n      mmts.lineWidth\n    );\n    // draw url of site\n    context.textBaseline = 'middle';\n    context.textAlign = 'center';\n    context.font = `${mmts.fontSize * 1.25}px sans-serif`;\n    context.fillText(\n      'https://jonesnxt.github.io/kilordle/',\n      mmts.leftGutter + mmts.gridWidth / 2,\n      mmts.nonTitleHeight - mmts.margin\n    );\n    // draw grid of squares\n    context.fillStyle = '#0fb30f';\n    const drawnSquareSide = mmts.squareSide - mmts.squarePadding * 2;\n    const finalHeight = progressHistory[progressHistory.length - 1];\n    for (let x = 0; x < actualColumns; x++) {\n      const wordsGotten =\n        progressHistory[Math.floor(guesses * (x / actualColumns))];\n      const columnSquares = Math.round(wordsGotten * (rows / finalHeight));\n      for (let y = rows; y > rows - columnSquares; y--) {\n        const xPos =\n          mmts.gridLeftEdge + x * mmts.squareSide + mmts.squarePadding;\n        const yPos = (y - 1) * mmts.squareSide + mmts.squarePadding;\n        context.fillRect(xPos, yPos, drawnSquareSide, drawnSquareSide);\n      }\n    }\n    canvas.toBlob((blob) => {\n      if (blob) {\n        let oldCanvasURL = canvasURL;\n        setCanvasURL(URL.createObjectURL(blob));\n        canvasResult.current = blob;\n        URL.revokeObjectURL(oldCanvasURL);\n      }\n    });\n  }, [progressHistory]);\n  const [buttonText, setButtonText] = useState('Share Results');\n  const shareResults = () => {\n    if (canvasResult.current) {\n      try {\n        navigator.clipboard\n          .write([\n            new ClipboardItem({\n              [canvasResult.current.type]: canvasResult.current,\n            }),\n          ])\n          .then(() => {\n            setButtonText('Copied to clipboard');\n          });\n      } catch {\n        const dl = document.createElement('a');\n        dl.download = 'kilordle.png';\n        dl.href = canvasURL;\n        dl.click();\n      }\n    }\n  };\n  return (\n    <>\n      <img\n        src={canvasURL}\n        alt=\"Congratulations, you have beaten Kilordle!\"\n        style={{ width: displayWidth, maxWidth: '95%', height: 'auto' }}\n      />\n      <ShareButton onClick={shareResults}>{buttonText}</ShareButton>\n    </>\n  );\n}\n\nexport default EndScreen;\n","/Users/ananyagupta/Desktop/kilordle/src/util/isYellow.ts",[],[],{"ruleId":"84","severity":1,"message":"85","line":55,"column":6,"nodeType":"86","endLine":55,"endColumn":8,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":66,"column":6,"nodeType":"86","endLine":66,"endColumn":15,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":23,"column":26,"nodeType":"92","messageId":"93","endLine":23,"endColumn":89,"fix":"94"},{"ruleId":"84","severity":1,"message":"95","line":154,"column":6,"nodeType":"86","endLine":154,"endColumn":23,"suggestions":"96"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'guesslist' and 'wordlist'. Either include them or remove the dependency array. You can also do a functional update 'setWordlist(w => ...)' if you only need 'wordlist' in the 'setWordlist' call.","ArrayExpression",["97"],"React Hook useEffect has missing dependencies: 'addKey' and 'expired'. Either include them or remove the dependency array.",["98"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"99","text":"100"},"React Hook useEffect has missing dependencies: 'actualColumns', 'canvasURL', 'guesses', 'mmts.bottomGutter', 'mmts.fontSize', 'mmts.gridLeftEdge', 'mmts.gridWidth', 'mmts.height', 'mmts.leftGutter', 'mmts.lineWidth', 'mmts.margin', 'mmts.nonTitleHeight', 'mmts.squarePadding', 'mmts.squareSide', and 'mmts.width'. Either include them or remove the dependency array.",["101"],{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},[530,530]," rel=\"noreferrer\"",{"desc":"106","fix":"107"},"Update the dependencies array to be: [guesslist, wordlist]",{"range":"108","text":"109"},"Update the dependencies array to be: [addKey, expired, working]",{"range":"110","text":"111"},"Update the dependencies array to be: [actualColumns, canvasURL, guesses, mmts.bottomGutter, mmts.fontSize, mmts.gridLeftEdge, mmts.gridWidth, mmts.height, mmts.leftGutter, mmts.lineWidth, mmts.margin, mmts.nonTitleHeight, mmts.squarePadding, mmts.squareSide, mmts.width, progressHistory]",{"range":"112","text":"113"},[1741,1743],"[guesslist, wordlist]",[2057,2066],"[addKey, expired, working]",[4788,4805],"[actualColumns, canvasURL, guesses, mmts.bottomGutter, mmts.fontSize, mmts.gridLeftEdge, mmts.gridWidth, mmts.height, mmts.leftGutter, mmts.lineWidth, mmts.margin, mmts.nonTitleHeight, mmts.squarePadding, mmts.squareSide, mmts.width, progressHistory]"]