{"ast":null,"code":"var _jsxFileName = \"/Users/ananyagupta/Desktop/kilordle/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport { Header, Keyboard, Puzzles, EndScreen } from './components';\nimport { checkValidity } from './util/checkValidity';\nimport { generateWordlist } from './util/generateWordlist';\nimport { sortByValue } from './util/sortByValue';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  background-color: #f7f8f9;\n`;\n_c = Container;\nconst Content = styled.div`\n  max-width: 600px;\n  box-shadow: 4px 4px 40px 4px rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n  margin-bottom: 200px;\n`;\n_c2 = Content;\n\nfunction App() {\n  _s();\n\n  const totalWords = 1000;\n  const [wordlist, setWordlist] = useState(generateWordlist(totalWords));\n  const [guesslist, setGuesslist] = useState([]);\n  const [progressHistory, setProgressHistory] = useState([]);\n  const [working, setWorking] = useState('');\n  const maxGuesses = 1005;\n  const expired = guesslist.length >= maxGuesses;\n\n  function addKey(key) {\n    if (key === '-' || key === 'Backspace') setWorking(tmp => tmp.slice(0, tmp.length - 1));else if ((key === '+' || key === 'Enter') && working.length === 5 && checkValidity(working)) {\n      // lets go.\n      const newGuesslist = guesslist.concat([working]);\n      setGuesslist(newGuesslist);\n      setWorking('');\n      setWordlist(sortByValue(wordlist, newGuesslist));\n      setProgressHistory(progressHistory.concat([totalWords - (wordlist.length - 1)]));\n    } else if (working.length !== 5 && key.length === 1 && key !== ' ') {\n      setWorking(tmp => tmp + key.toLowerCase());\n    }\n  }\n\n  useEffect(() => {\n    setWordlist(sortByValue(wordlist, guesslist));\n  }, []);\n  useEffect(() => {\n    function keyEvent(ev) {\n      addKey(ev.key);\n    }\n\n    if (!expired) {\n      window.addEventListener('keydown', keyEvent);\n      if (working.length > 5) setWorking(tmp => tmp.slice(0, 5));\n      return () => window.removeEventListener('keydown', keyEvent);\n    }\n  }, [working]);\n\n  function getUsedLetters() {\n    var letters = [];\n    guesslist.forEach(word => {\n      for (var i = 0; i < word.length; i++) {\n        var char = word.charAt(i);\n        if (letters.indexOf(char) === -1) letters.push(char);\n      }\n    });\n    return letters;\n  } // const endScreenDemo = true;\n  // useEffect(() => {\n  //   if (endScreenDemo) {\n  //     let fakeProgressHistory = [];\n  //     let progress = 0;\n  //     while (progress < 1000) {\n  //       progress += Math.floor(Math.random() * 10);\n  //       fakeProgressHistory.push(progress);\n  //     }\n  //     setProgressHistory(fakeProgressHistory);\n  //     setWordlist([]);\n  //     setGuesslist(Array(fakeProgressHistory.length).fill('placeholder'));\n  //   }\n  // }, []);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Content, {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          remaining: wordlist.length,\n          guesses: guesslist.length,\n          limit: maxGuesses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Puzzles, {\n          expired: expired,\n          wordlist: wordlist,\n          working: working,\n          guesslist: guesslist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), wordlist.length === 0 ? /*#__PURE__*/_jsxDEV(EndScreen, {\n          progressHistory: progressHistory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(Keyboard, {\n          guesses: guesslist.length,\n          remaining: wordlist.length,\n          limit: maxGuesses,\n          expired: expired,\n          onKeyPress: key => addKey(key),\n          usedLetters: getUsedLetters()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"j1ATJh7GtYNT/iwP2+RjcQMIaaI=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Content\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/ananyagupta/Desktop/kilordle/src/App.tsx"],"names":["React","useEffect","useState","styled","Header","Keyboard","Puzzles","EndScreen","checkValidity","generateWordlist","sortByValue","Container","div","Content","App","totalWords","wordlist","setWordlist","guesslist","setGuesslist","progressHistory","setProgressHistory","working","setWorking","maxGuesses","expired","length","addKey","key","tmp","slice","newGuesslist","concat","toLowerCase","keyEvent","ev","window","addEventListener","removeEventListener","getUsedLetters","letters","forEach","word","i","char","charAt","indexOf","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport { Header, Keyboard, Puzzles, EndScreen } from './components';\nimport { checkValidity } from './util/checkValidity';\nimport { generateWordlist } from './util/generateWordlist';\nimport { sortByValue } from './util/sortByValue';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  background-color: #f7f8f9;\n`;\n\nconst Content = styled.div`\n  max-width: 600px;\n  box-shadow: 4px 4px 40px 4px rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n  margin-bottom: 200px;\n`;\n\nfunction App() {\n  const totalWords = 1000;\n  const [wordlist, setWordlist] = useState(generateWordlist(totalWords));\n  const [guesslist, setGuesslist] = useState<string[]>([]);\n  const [progressHistory, setProgressHistory] = useState<number[]>([]);\n  const [working, setWorking] = useState('');\n\n  const maxGuesses = 1005;\n  const expired = guesslist.length >= maxGuesses;\n\n  function addKey(key: string) {\n    if (key === '-' || key === 'Backspace')\n      setWorking((tmp) => tmp.slice(0, tmp.length - 1));\n    else if (\n      (key === '+' || key === 'Enter') &&\n      working.length === 5 &&\n      checkValidity(working)\n    ) {\n      // lets go.\n      const newGuesslist = guesslist.concat([working]);\n      setGuesslist(newGuesslist);\n      setWorking('');\n      setWordlist(sortByValue(wordlist, newGuesslist));\n      setProgressHistory(\n        progressHistory.concat([totalWords - (wordlist.length - 1)])\n      );\n    } else if (working.length !== 5 && key.length === 1 && key !== ' ') {\n      setWorking((tmp) => tmp + key.toLowerCase());\n    }\n  }\n\n  useEffect(() => {\n    setWordlist(sortByValue(wordlist, guesslist));\n  }, []);\n\n  useEffect(() => {\n    function keyEvent(ev: KeyboardEvent) {\n      addKey(ev.key);\n    }\n    if (!expired) {\n      window.addEventListener('keydown', keyEvent);\n      if (working.length > 5) setWorking((tmp) => tmp.slice(0, 5));\n      return () => window.removeEventListener('keydown', keyEvent);\n    }\n  }, [working]);\n\n  function getUsedLetters() {\n    var letters: string[] = [];\n    guesslist.forEach((word) => {\n      for (var i = 0; i < word.length; i++) {\n        var char = word.charAt(i);\n        if (letters.indexOf(char) === -1) letters.push(char);\n      }\n    });\n    return letters;\n  }\n\n  // const endScreenDemo = true;\n  // useEffect(() => {\n  //   if (endScreenDemo) {\n  //     let fakeProgressHistory = [];\n  //     let progress = 0;\n  //     while (progress < 1000) {\n  //       progress += Math.floor(Math.random() * 10);\n  //       fakeProgressHistory.push(progress);\n  //     }\n  //     setProgressHistory(fakeProgressHistory);\n  //     setWordlist([]);\n  //     setGuesslist(Array(fakeProgressHistory.length).fill('placeholder'));\n  //   }\n  // }, []);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Content>\n          <Header\n            remaining={wordlist.length}\n            guesses={guesslist.length}\n            limit={maxGuesses}\n          />\n          <Puzzles\n            expired={expired}\n            wordlist={wordlist}\n            working={working}\n            guesslist={guesslist}\n          />\n          {wordlist.length === 0 ? (\n            <EndScreen progressHistory={progressHistory} />\n          ) : null}\n          <Keyboard\n            guesses={guesslist.length}\n            remaining={wordlist.length}\n            limit={maxGuesses}\n            expired={expired}\n            onKeyPress={(key) => addKey(key)}\n            usedLetters={getUsedLetters()}\n          />\n        </Content>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}