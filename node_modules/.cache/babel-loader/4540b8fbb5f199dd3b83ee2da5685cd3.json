{"ast":null,"code":"export function sortByValue(words,guesses){// iterate through each word and give it a score\nvar scores=words.map(function(word){return scoreWordle(word,guesses);});return scores.map(function(score,i){return[words[i],score];}).filter(function(p){return p[1]!==15;}).sort(function(a,b){return b[1]-a[1];}).map(function(k){return k[0];});}export function scoreWordle(word,guesses){// yeah I know\nreturn word.split('').reduce(function(acc,letter,i){return acc+guesses.reduce(function(best,guess){return Math.max(best,letter===guess[i]?3:guess.includes(letter)?1:0);},0);},0);}","map":{"version":3,"sources":["/Users/ananyagupta/Desktop/kilordle/src/util/sortByValue.ts"],"names":["sortByValue","words","guesses","scores","map","word","scoreWordle","score","i","filter","p","sort","a","b","k","split","reduce","acc","letter","best","guess","Math","max","includes"],"mappings":"AAAA,MAAO,SAASA,CAAAA,WAAT,CAAqBC,KAArB,CAAsCC,OAAtC,CAAyD,CAC9D;AACA,GAAIC,CAAAA,MAAM,CAAGF,KAAK,CAACG,GAAN,CAAU,SAACC,IAAD,QAAUC,CAAAA,WAAW,CAACD,IAAD,CAAOH,OAAP,CAArB,EAAV,CAAb,CAEA,MAAOC,CAAAA,MAAM,CACVC,GADI,CACkB,SAACG,KAAD,CAAQC,CAAR,QAAc,CAACP,KAAK,CAACO,CAAD,CAAN,CAAWD,KAAX,CAAd,EADlB,EAEJE,MAFI,CAEG,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAAC,CAAD,CAAD,GAAS,EAAhB,EAFH,EAGJC,IAHI,CAGC,SAACC,CAAD,CAAIC,CAAJ,QAAUA,CAAAA,CAAC,CAAC,CAAD,CAAD,CAAOD,CAAC,CAAC,CAAD,CAAlB,EAHD,EAIJR,GAJI,CAIA,SAACU,CAAD,QAAOA,CAAAA,CAAC,CAAC,CAAD,CAAR,EAJA,CAAP,CAKD,CAED,MAAO,SAASR,CAAAA,WAAT,CAAqBD,IAArB,CAAmCH,OAAnC,CAAsD,CAC3D;AACA,MAAOG,CAAAA,IAAI,CAACU,KAAL,CAAW,EAAX,EAAeC,MAAf,CAAsB,SAACC,GAAD,CAAMC,MAAN,CAAcV,CAAd,QAC3BS,CAAAA,GAAG,CAAGf,OAAO,CAACc,MAAR,CAAe,SAACG,IAAD,CAAOC,KAAP,QACnBC,CAAAA,IAAI,CAACC,GAAL,CAASH,IAAT,CAAeD,MAAM,GAAKE,KAAK,CAACZ,CAAD,CAAhB,CAAsB,CAAtB,CAA2BY,KAAK,CAACG,QAAN,CAAeL,MAAf,EAAyB,CAAzB,CAA6B,CAAvE,CADmB,EAAf,CAEJ,CAFI,CADqB,EAAtB,CAKL,CALK,CAAP,CAOD","sourcesContent":["export function sortByValue(words: string[], guesses: string[]) {\n  // iterate through each word and give it a score\n  let scores = words.map((word) => scoreWordle(word, guesses));\n\n  return scores\n    .map<[string, number]>((score, i) => [words[i], score])\n    .filter((p) => p[1] !== 15)\n    .sort((a, b) => b[1] - a[1])\n    .map((k) => k[0])\n}\n\nexport function scoreWordle(word: string, guesses: string[]) {\n  // yeah I know\n  return word.split('').reduce((acc, letter, i) => \n    acc + guesses.reduce((best, guess) => \n      Math.max(best, letter === guess[i] ? 3 : (guess.includes(letter) ? 1 : 0)),\n      0,\n    ),\n    0,\n  );\n}"]},"metadata":{},"sourceType":"module"}