{"ast":null,"code":"import _defineProperty from\"/Users/ananyagupta/Desktop/kilordle/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _slicedToArray from\"/Users/ananyagupta/Desktop/kilordle/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _taggedTemplateLiteral from\"/Users/ananyagupta/Desktop/kilordle/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject;import React,{useEffect,useRef,useState}from'react';import styled from'styled-components';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ShareButton=styled.button(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  margin: 10px 0;\\n  background-color: #0fb30f;\\n  color: white;\\n  border: 1px solid rgba(0, 0, 0, 0.5);\\n  border-radius: 5px;\\n  outline: none;\\n  font-size: 1.5em;\\n  cursor: pointer;\\n  box-shadow: 0 1px 5px 1px rgba(0, 0, 0, 0.1);\\n\\n  :hover {\\n    opacity: 0.6;\\n  }\\n\\n  &:active {\\n    color: lightgray;\\n  }\\n\"])));function EndScreen(_ref){var progressHistory=_ref.progressHistory;var guesses=progressHistory.length;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),canvasURL=_useState2[0],setCanvasURL=_useState2[1];var canvasResult=useRef(null);var displayWidth=525;var titleHeight=20;var displayHeight=250+titleHeight;var maxColumns=50;var actualColumns=Math.min(maxColumns,guesses);var rows=25;var mmts={// measurements\nheight:displayHeight,nonTitleHeight:displayHeight-titleHeight,width:displayWidth,leftGutter:30,bottomGutter:15,margin:3,lineWidth:1,fontSize:10,gridLeftEdge:0,gridWidth:0,gridBottomEdge:0,gridHeight:0,squareSide:0,squarePadding:1};mmts.gridLeftEdge=mmts.leftGutter+mmts.lineWidth+mmts.margin/2;mmts.gridBottomEdge=mmts.bottomGutter+mmts.lineWidth;mmts.gridWidth=mmts.width-mmts.leftGutter-mmts.leftGutter/2-mmts.margin;mmts.gridHeight=mmts.nonTitleHeight-mmts.gridBottomEdge;mmts.squareSide=mmts.gridHeight/rows;// scale adjustment\nvar mmt;for(mmt in mmts){mmts[mmt]*=devicePixelRatio*2;}useEffect(function(){var canvas=document.createElement('canvas');if(!canvas)return;canvas.width=mmts.width;canvas.height=mmts.height;var context=canvas.getContext('2d');if(!context)return;console.log('drawing to canvas');console.log('progress history is',progressHistory);// draw background (white)\ncontext.fillStyle='#ffffff';context.fillRect(0,0,canvas.width,canvas.height);// create margin\ncontext.scale(0.95,0.95);context.translate(0.025*mmts.width,0.025*mmts.height);// create title\ncontext.fillStyle='#000000';context.textAlign='center';context.textBaseline='top';context.font=\"\".concat(mmts.fontSize*1.5,\"px sans-serif\");context.fillText(\"I beat Kilordle in \".concat(guesses,\" guesses :')\"),mmts.width/2,0);context.translate(0,mmts.fontSize*1.5);// setup fonts, colors\ncontext.font=\"\".concat(mmts.fontSize,\"px sans-serif\");// draw numbers\ncontext.textBaseline='alphabetic';context.textAlign='right';context.fillText('0',mmts.leftGutter-mmts.margin,mmts.nonTitleHeight-mmts.margin);context.textBaseline='top';context.fillText('1000',mmts.leftGutter-mmts.margin,mmts.margin);context.textBaseline='alphabetic';context.textAlign='center';context.fillText(String(guesses),mmts.gridLeftEdge+actualColumns*mmts.squareSide+mmts.squarePadding-mmts.squareSide/2,mmts.nonTitleHeight-mmts.margin);// draw axes\ncontext.fillRect(mmts.leftGutter,0,mmts.lineWidth,mmts.nonTitleHeight);context.fillRect(mmts.leftGutter/2,mmts.nonTitleHeight-mmts.bottomGutter,mmts.width-mmts.leftGutter,mmts.lineWidth);// draw url of site\ncontext.textBaseline='middle';context.textAlign='center';context.font=\"\".concat(mmts.fontSize*1.25,\"px sans-serif\");context.fillText('https://jonesnxt.github.io/kilordle/',mmts.leftGutter+mmts.gridWidth/2,mmts.nonTitleHeight-mmts.margin);// draw grid of squares\ncontext.fillStyle='#0fb30f';var drawnSquareSide=mmts.squareSide-mmts.squarePadding*2;var finalHeight=progressHistory[progressHistory.length-1];for(var x=0;x<actualColumns;x++){var wordsGotten=progressHistory[Math.floor(guesses*(x/actualColumns))];var columnSquares=Math.round(wordsGotten*(rows/finalHeight));for(var y=rows;y>rows-columnSquares;y--){var xPos=mmts.gridLeftEdge+x*mmts.squareSide+mmts.squarePadding;var yPos=(y-1)*mmts.squareSide+mmts.squarePadding;context.fillRect(xPos,yPos,drawnSquareSide,drawnSquareSide);}}canvas.toBlob(function(blob){if(blob){var oldCanvasURL=canvasURL;setCanvasURL(URL.createObjectURL(blob));canvasResult.current=blob;URL.revokeObjectURL(oldCanvasURL);}});},[progressHistory]);var _useState3=useState('Share Results'),_useState4=_slicedToArray(_useState3,2),buttonText=_useState4[0],setButtonText=_useState4[1];var shareResults=function shareResults(){if(canvasResult.current){try{navigator.clipboard.write([new ClipboardItem(_defineProperty({},canvasResult.current.type,canvasResult.current))]).then(function(){setButtonText('Copied to clipboard');});}catch(_unused){var dl=document.createElement('a');dl.download='kilordle.png';dl.href=canvasURL;dl.click();}}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"img\",{src:canvasURL,alt:\"Congratulations, you have beaten Kilordle!\",style:{width:displayWidth,maxWidth:'95%',height:'auto'}}),/*#__PURE__*/_jsx(ShareButton,{onClick:shareResults,children:buttonText})]});}export default EndScreen;","map":{"version":3,"sources":["/Users/ananyagupta/Desktop/kilordle/src/components/EndScreen.tsx"],"names":["React","useEffect","useRef","useState","styled","ShareButton","button","EndScreen","progressHistory","guesses","length","canvasURL","setCanvasURL","canvasResult","displayWidth","titleHeight","displayHeight","maxColumns","actualColumns","Math","min","rows","mmts","height","nonTitleHeight","width","leftGutter","bottomGutter","margin","lineWidth","fontSize","gridLeftEdge","gridWidth","gridBottomEdge","gridHeight","squareSide","squarePadding","mmt","devicePixelRatio","canvas","document","createElement","context","getContext","console","log","fillStyle","fillRect","scale","translate","textAlign","textBaseline","font","fillText","String","drawnSquareSide","finalHeight","x","wordsGotten","floor","columnSquares","round","y","xPos","yPos","toBlob","blob","oldCanvasURL","URL","createObjectURL","current","revokeObjectURL","buttonText","setButtonText","shareResults","navigator","clipboard","write","ClipboardItem","type","then","dl","download","href","click","maxWidth"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nconst ShareButton = styled.button`\n  margin: 10px 0;\n  background-color: #0fb30f;\n  color: white;\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  border-radius: 5px;\n  outline: none;\n  font-size: 1.5em;\n  cursor: pointer;\n  box-shadow: 0 1px 5px 1px rgba(0, 0, 0, 0.1);\n\n  :hover {\n    opacity: 0.6;\n  }\n\n  &:active {\n    color: lightgray;\n  }\n`;\n\nfunction EndScreen({ progressHistory }: { progressHistory: number[] }) {\n  const guesses = progressHistory.length;\n  const [canvasURL, setCanvasURL] = useState('');\n  const canvasResult = useRef<Blob | null>(null);\n\n  const displayWidth = 525;\n  const titleHeight = 20;\n  const displayHeight = 250 + titleHeight;\n  const maxColumns = 50;\n  const actualColumns = Math.min(maxColumns, guesses);\n  const rows = 25;\n\n  const mmts = {\n    // measurements\n    height: displayHeight,\n    nonTitleHeight: displayHeight - titleHeight,\n    width: displayWidth,\n    leftGutter: 30,\n    bottomGutter: 15,\n    margin: 3,\n    lineWidth: 1,\n    fontSize: 10,\n    gridLeftEdge: 0,\n    gridWidth: 0,\n    gridBottomEdge: 0,\n    gridHeight: 0,\n    squareSide: 0,\n    squarePadding: 1,\n  };\n  mmts.gridLeftEdge = mmts.leftGutter + mmts.lineWidth + mmts.margin / 2;\n  mmts.gridBottomEdge = mmts.bottomGutter + mmts.lineWidth;\n  mmts.gridWidth =\n    mmts.width - mmts.leftGutter - mmts.leftGutter / 2 - mmts.margin;\n  mmts.gridHeight = mmts.nonTitleHeight - mmts.gridBottomEdge;\n  mmts.squareSide = mmts.gridHeight / rows;\n\n  // scale adjustment\n  let mmt: keyof typeof mmts;\n  for (mmt in mmts) {\n    mmts[mmt] *= devicePixelRatio * 2;\n  }\n\n  useEffect(() => {\n    const canvas = document.createElement('canvas');\n    if (!canvas) return;\n    canvas.width = mmts.width;\n    canvas.height = mmts.height;\n    const context = canvas.getContext('2d');\n    if (!context) return;\n    console.log('drawing to canvas');\n    console.log('progress history is', progressHistory);\n    // draw background (white)\n    context.fillStyle = '#ffffff';\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    // create margin\n    context.scale(0.95, 0.95);\n    context.translate(0.025 * mmts.width, 0.025 * mmts.height);\n    // create title\n    context.fillStyle = '#000000';\n    context.textAlign = 'center';\n    context.textBaseline = 'top';\n    context.font = `${mmts.fontSize * 1.5}px sans-serif`;\n    context.fillText(\n      `I beat Kilordle in ${guesses} guesses :')`,\n      mmts.width / 2,\n      0\n    );\n    context.translate(0, mmts.fontSize * 1.5);\n    // setup fonts, colors\n    context.font = `${mmts.fontSize}px sans-serif`;\n    // draw numbers\n    context.textBaseline = 'alphabetic';\n    context.textAlign = 'right';\n    context.fillText(\n      '0',\n      mmts.leftGutter - mmts.margin,\n      mmts.nonTitleHeight - mmts.margin\n    );\n    context.textBaseline = 'top';\n    context.fillText('1000', mmts.leftGutter - mmts.margin, mmts.margin);\n    context.textBaseline = 'alphabetic';\n    context.textAlign = 'center';\n    context.fillText(\n      String(guesses),\n      mmts.gridLeftEdge +\n        actualColumns * mmts.squareSide +\n        mmts.squarePadding -\n        mmts.squareSide / 2,\n      mmts.nonTitleHeight - mmts.margin\n    );\n    // draw axes\n    context.fillRect(mmts.leftGutter, 0, mmts.lineWidth, mmts.nonTitleHeight);\n    context.fillRect(\n      mmts.leftGutter / 2,\n      mmts.nonTitleHeight - mmts.bottomGutter,\n      mmts.width - mmts.leftGutter,\n      mmts.lineWidth\n    );\n    // draw url of site\n    context.textBaseline = 'middle';\n    context.textAlign = 'center';\n    context.font = `${mmts.fontSize * 1.25}px sans-serif`;\n    context.fillText(\n      'https://jonesnxt.github.io/kilordle/',\n      mmts.leftGutter + mmts.gridWidth / 2,\n      mmts.nonTitleHeight - mmts.margin\n    );\n    // draw grid of squares\n    context.fillStyle = '#0fb30f';\n    const drawnSquareSide = mmts.squareSide - mmts.squarePadding * 2;\n    const finalHeight = progressHistory[progressHistory.length - 1];\n    for (let x = 0; x < actualColumns; x++) {\n      const wordsGotten =\n        progressHistory[Math.floor(guesses * (x / actualColumns))];\n      const columnSquares = Math.round(wordsGotten * (rows / finalHeight));\n      for (let y = rows; y > rows - columnSquares; y--) {\n        const xPos =\n          mmts.gridLeftEdge + x * mmts.squareSide + mmts.squarePadding;\n        const yPos = (y - 1) * mmts.squareSide + mmts.squarePadding;\n        context.fillRect(xPos, yPos, drawnSquareSide, drawnSquareSide);\n      }\n    }\n    canvas.toBlob((blob) => {\n      if (blob) {\n        let oldCanvasURL = canvasURL;\n        setCanvasURL(URL.createObjectURL(blob));\n        canvasResult.current = blob;\n        URL.revokeObjectURL(oldCanvasURL);\n      }\n    });\n  }, [progressHistory]);\n  const [buttonText, setButtonText] = useState('Share Results');\n  const shareResults = () => {\n    if (canvasResult.current) {\n      try {\n        navigator.clipboard\n          .write([\n            new ClipboardItem({\n              [canvasResult.current.type]: canvasResult.current,\n            }),\n          ])\n          .then(() => {\n            setButtonText('Copied to clipboard');\n          });\n      } catch {\n        const dl = document.createElement('a');\n        dl.download = 'kilordle.png';\n        dl.href = canvasURL;\n        dl.click();\n      }\n    }\n  };\n  return (\n    <>\n      <img\n        src={canvasURL}\n        alt=\"Congratulations, you have beaten Kilordle!\"\n        style={{ width: displayWidth, maxWidth: '95%', height: 'auto' }}\n      />\n      <ShareButton onClick={shareResults}>{buttonText}</ShareButton>\n    </>\n  );\n}\n\nexport default EndScreen;\n"]},"metadata":{},"sourceType":"module"}