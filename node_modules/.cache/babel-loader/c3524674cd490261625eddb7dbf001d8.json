{"ast":null,"code":"export function sortByValue(words, guesses) {\n  // iterate through each word and give it a score\n  let scores = words.map(word => scoreWordle(word, guesses));\n  return scores.map((score, i) => [words[i], score]).filter(p => p[1] !== 15).sort((a, b) => b[1] - a[1]).map(k => k[0]);\n}\nexport function scoreWordle(word, guesses) {\n  // yeah I know\n  return word.split('').reduce((acc, letter, i) => acc + guesses.reduce((best, guess) => Math.max(best, letter === guess[i] ? 3 : guess.includes(letter) ? 1 : 0), 0), 0);\n}","map":{"version":3,"sources":["/Users/ananyagupta/Desktop/kilordle/src/util/sortByValue.ts"],"names":["sortByValue","words","guesses","scores","map","word","scoreWordle","score","i","filter","p","sort","a","b","k","split","reduce","acc","letter","best","guess","Math","max","includes"],"mappings":"AAAA,OAAO,SAASA,WAAT,CAAqBC,KAArB,EAAsCC,OAAtC,EAAyD;AAC9D;AACA,MAAIC,MAAM,GAAGF,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAUC,WAAW,CAACD,IAAD,EAAOH,OAAP,CAA/B,CAAb;AAEA,SAAOC,MAAM,CACVC,GADI,CACkB,CAACG,KAAD,EAAQC,CAAR,KAAc,CAACP,KAAK,CAACO,CAAD,CAAN,EAAWD,KAAX,CADhC,EAEJE,MAFI,CAEIC,CAAD,IAAOA,CAAC,CAAC,CAAD,CAAD,KAAS,EAFnB,EAGJC,IAHI,CAGC,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAHnB,EAIJR,GAJI,CAICU,CAAD,IAAOA,CAAC,CAAC,CAAD,CAJR,CAAP;AAKD;AAED,OAAO,SAASR,WAAT,CAAqBD,IAArB,EAAmCH,OAAnC,EAAsD;AAC3D;AACA,SAAOG,IAAI,CAACU,KAAL,CAAW,EAAX,EAAeC,MAAf,CAAsB,CAACC,GAAD,EAAMC,MAAN,EAAcV,CAAd,KAC3BS,GAAG,GAAGf,OAAO,CAACc,MAAR,CAAe,CAACG,IAAD,EAAOC,KAAP,KACnBC,IAAI,CAACC,GAAL,CAASH,IAAT,EAAeD,MAAM,KAAKE,KAAK,CAACZ,CAAD,CAAhB,GAAsB,CAAtB,GAA2BY,KAAK,CAACG,QAAN,CAAeL,MAAf,IAAyB,CAAzB,GAA6B,CAAvE,CADI,EAEJ,CAFI,CADD,EAKL,CALK,CAAP;AAOD","sourcesContent":["export function sortByValue(words: string[], guesses: string[]) {\n  // iterate through each word and give it a score\n  let scores = words.map((word) => scoreWordle(word, guesses));\n\n  return scores\n    .map<[string, number]>((score, i) => [words[i], score])\n    .filter((p) => p[1] !== 15)\n    .sort((a, b) => b[1] - a[1])\n    .map((k) => k[0])\n}\n\nexport function scoreWordle(word: string, guesses: string[]) {\n  // yeah I know\n  return word.split('').reduce((acc, letter, i) => \n    acc + guesses.reduce((best, guess) => \n      Math.max(best, letter === guess[i] ? 3 : (guess.includes(letter) ? 1 : 0)),\n      0,\n    ),\n    0,\n  );\n}"]},"metadata":{},"sourceType":"module"}