{"ast":null,"code":"import _slicedToArray from\"/Users/ananyagupta/Desktop/kilordle/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _taggedTemplateLiteral from\"/Users/ananyagupta/Desktop/kilordle/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2;import React,{useEffect,useState}from'react';import styled from'styled-components';import'./App.css';import{Header,Keyboard,Puzzles,EndScreen}from'./components';import{checkValidity}from'./util/checkValidity';import{generateWordlist}from'./util/generateWordlist';import{sortByValue}from'./util/sortByValue';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  background-color: #f7f8f9;\\n\"])));var Content=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  max-width: 600px;\\n  box-shadow: 4px 4px 40px 4px rgba(0, 0, 0, 0.2);\\n  background-color: #fff;\\n  margin-bottom: 200px;\\n\"])));function App(){var totalWords=1000;var _useState=useState(generateWordlist(totalWords)),_useState2=_slicedToArray(_useState,2),wordlist=_useState2[0],setWordlist=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),guesslist=_useState4[0],setGuesslist=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),progressHistory=_useState6[0],setProgressHistory=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),working=_useState8[0],setWorking=_useState8[1];var maxGuesses=1005;var expired=guesslist.length>=maxGuesses;function addKey(key){if(key==='-'||key==='Backspace')setWorking(function(tmp){return tmp.slice(0,tmp.length-1);});else if((key==='+'||key==='Enter')&&working.length===5&&checkValidity(working)){// lets go.\nvar newGuesslist=guesslist.concat([working]);setGuesslist(newGuesslist);setWorking('');setWordlist(sortByValue(wordlist,newGuesslist));setProgressHistory(progressHistory.concat([totalWords-(wordlist.length-1)]));}else if(working.length!==5&&key.length===1&&key!==' '){setWorking(function(tmp){return tmp+key.toLowerCase();});}}useEffect(function(){setWordlist(sortByValue(wordlist,guesslist));},[]);useEffect(function(){function keyEvent(ev){addKey(ev.key);}if(!expired){window.addEventListener('keydown',keyEvent);if(working.length>5)setWorking(function(tmp){return tmp.slice(0,5);});return function(){return window.removeEventListener('keydown',keyEvent);};}},[working]);function getUsedLetters(){var letters=[];guesslist.forEach(function(word){for(var i=0;i<word.length;i++){var char=word.charAt(i);if(letters.indexOf(char)===-1)letters.push(char);}});return letters;}// const endScreenDemo = true;\n// useEffect(() => {\n//   if (endScreenDemo) {\n//     let fakeProgressHistory = [];\n//     let progress = 0;\n//     while (progress < 1000) {\n//       progress += Math.floor(Math.random() * 10);\n//       fakeProgressHistory.push(progress);\n//     }\n//     setProgressHistory(fakeProgressHistory);\n//     setWordlist([]);\n//     setGuesslist(Array(fakeProgressHistory.length).fill('placeholder'));\n//   }\n// }, []);\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsxs(Content,{children:[/*#__PURE__*/_jsx(Header,{remaining:wordlist.length,guesses:guesslist.length,limit:maxGuesses}),/*#__PURE__*/_jsx(Puzzles,{expired:expired,wordlist:wordlist,working:working,guesslist:guesslist}),wordlist.length===0?/*#__PURE__*/_jsx(EndScreen,{progressHistory:progressHistory}):null,/*#__PURE__*/_jsx(Keyboard,{guesses:guesslist.length,remaining:wordlist.length,limit:maxGuesses,expired:expired,onKeyPress:function onKeyPress(key){return addKey(key);},usedLetters:getUsedLetters()})]})})});}export default App;","map":{"version":3,"sources":["/Users/ananyagupta/Desktop/kilordle/src/App.tsx"],"names":["React","useEffect","useState","styled","Header","Keyboard","Puzzles","EndScreen","checkValidity","generateWordlist","sortByValue","Container","div","Content","App","totalWords","wordlist","setWordlist","guesslist","setGuesslist","progressHistory","setProgressHistory","working","setWorking","maxGuesses","expired","length","addKey","key","tmp","slice","newGuesslist","concat","toLowerCase","keyEvent","ev","window","addEventListener","removeEventListener","getUsedLetters","letters","forEach","word","i","char","charAt","indexOf","push"],"mappings":"uSAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,MAAO,WAAP,CACA,OAASC,MAAT,CAAiBC,QAAjB,CAA2BC,OAA3B,CAAoCC,SAApC,KAAqD,cAArD,CACA,OAASC,aAAT,KAA8B,sBAA9B,CACA,OAASC,gBAAT,KAAiC,yBAAjC,CACA,OAASC,WAAT,KAA4B,oBAA5B,C,wFAEA,GAAMC,CAAAA,SAAS,CAAGR,MAAM,CAACS,GAAV,+IAAf,CAMA,GAAMC,CAAAA,OAAO,CAAGV,MAAM,CAACS,GAAV,kMAAb,CAOA,QAASE,CAAAA,GAAT,EAAe,CACb,GAAMC,CAAAA,UAAU,CAAG,IAAnB,CACA,cAAgCb,QAAQ,CAACO,gBAAgB,CAACM,UAAD,CAAjB,CAAxC,wCAAOC,QAAP,eAAiBC,WAAjB,eACA,eAAkCf,QAAQ,CAAW,EAAX,CAA1C,yCAAOgB,SAAP,eAAkBC,YAAlB,eACA,eAA8CjB,QAAQ,CAAW,EAAX,CAAtD,yCAAOkB,eAAP,eAAwBC,kBAAxB,eACA,eAA8BnB,QAAQ,CAAC,EAAD,CAAtC,yCAAOoB,OAAP,eAAgBC,UAAhB,eAEA,GAAMC,CAAAA,UAAU,CAAG,IAAnB,CACA,GAAMC,CAAAA,OAAO,CAAGP,SAAS,CAACQ,MAAV,EAAoBF,UAApC,CAEA,QAASG,CAAAA,MAAT,CAAgBC,GAAhB,CAA6B,CAC3B,GAAIA,GAAG,GAAK,GAAR,EAAeA,GAAG,GAAK,WAA3B,CACEL,UAAU,CAAC,SAACM,GAAD,QAASA,CAAAA,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAaD,GAAG,CAACH,MAAJ,CAAa,CAA1B,CAAT,EAAD,CAAV,CADF,IAEK,IACH,CAACE,GAAG,GAAK,GAAR,EAAeA,GAAG,GAAK,OAAxB,GACAN,OAAO,CAACI,MAAR,GAAmB,CADnB,EAEAlB,aAAa,CAACc,OAAD,CAHV,CAIH,CACA;AACA,GAAMS,CAAAA,YAAY,CAAGb,SAAS,CAACc,MAAV,CAAiB,CAACV,OAAD,CAAjB,CAArB,CACAH,YAAY,CAACY,YAAD,CAAZ,CACAR,UAAU,CAAC,EAAD,CAAV,CACAN,WAAW,CAACP,WAAW,CAACM,QAAD,CAAWe,YAAX,CAAZ,CAAX,CACAV,kBAAkB,CAChBD,eAAe,CAACY,MAAhB,CAAuB,CAACjB,UAAU,EAAIC,QAAQ,CAACU,MAAT,CAAkB,CAAtB,CAAX,CAAvB,CADgB,CAAlB,CAGD,CAbI,IAaE,IAAIJ,OAAO,CAACI,MAAR,GAAmB,CAAnB,EAAwBE,GAAG,CAACF,MAAJ,GAAe,CAAvC,EAA4CE,GAAG,GAAK,GAAxD,CAA6D,CAClEL,UAAU,CAAC,SAACM,GAAD,QAASA,CAAAA,GAAG,CAAGD,GAAG,CAACK,WAAJ,EAAf,EAAD,CAAV,CACD,CACF,CAEDhC,SAAS,CAAC,UAAM,CACdgB,WAAW,CAACP,WAAW,CAACM,QAAD,CAAWE,SAAX,CAAZ,CAAX,CACD,CAFQ,CAEN,EAFM,CAAT,CAIAjB,SAAS,CAAC,UAAM,CACd,QAASiC,CAAAA,QAAT,CAAkBC,EAAlB,CAAqC,CACnCR,MAAM,CAACQ,EAAE,CAACP,GAAJ,CAAN,CACD,CACD,GAAI,CAACH,OAAL,CAAc,CACZW,MAAM,CAACC,gBAAP,CAAwB,SAAxB,CAAmCH,QAAnC,EACA,GAAIZ,OAAO,CAACI,MAAR,CAAiB,CAArB,CAAwBH,UAAU,CAAC,SAACM,GAAD,QAASA,CAAAA,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAa,CAAb,CAAT,EAAD,CAAV,CACxB,MAAO,kBAAMM,CAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,CAAsCJ,QAAtC,CAAN,EAAP,CACD,CACF,CATQ,CASN,CAACZ,OAAD,CATM,CAAT,CAWA,QAASiB,CAAAA,cAAT,EAA0B,CACxB,GAAIC,CAAAA,OAAiB,CAAG,EAAxB,CACAtB,SAAS,CAACuB,OAAV,CAAkB,SAACC,IAAD,CAAU,CAC1B,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,IAAI,CAAChB,MAAzB,CAAiCiB,CAAC,EAAlC,CAAsC,CACpC,GAAIC,CAAAA,IAAI,CAAGF,IAAI,CAACG,MAAL,CAAYF,CAAZ,CAAX,CACA,GAAIH,OAAO,CAACM,OAAR,CAAgBF,IAAhB,IAA0B,CAAC,CAA/B,CAAkCJ,OAAO,CAACO,IAAR,CAAaH,IAAb,EACnC,CACF,CALD,EAMA,MAAOJ,CAAAA,OAAP,CACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,mBACE,YAAK,SAAS,CAAC,KAAf,uBACE,KAAC,SAAD,wBACE,MAAC,OAAD,yBACE,KAAC,MAAD,EACE,SAAS,CAAExB,QAAQ,CAACU,MADtB,CAEE,OAAO,CAAER,SAAS,CAACQ,MAFrB,CAGE,KAAK,CAAEF,UAHT,EADF,cAME,KAAC,OAAD,EACE,OAAO,CAAEC,OADX,CAEE,QAAQ,CAAET,QAFZ,CAGE,OAAO,CAAEM,OAHX,CAIE,SAAS,CAAEJ,SAJb,EANF,CAYGF,QAAQ,CAACU,MAAT,GAAoB,CAApB,cACC,KAAC,SAAD,EAAW,eAAe,CAAEN,eAA5B,EADD,CAEG,IAdN,cAeE,KAAC,QAAD,EACE,OAAO,CAAEF,SAAS,CAACQ,MADrB,CAEE,SAAS,CAAEV,QAAQ,CAACU,MAFtB,CAGE,KAAK,CAAEF,UAHT,CAIE,OAAO,CAAEC,OAJX,CAKE,UAAU,CAAE,oBAACG,GAAD,QAASD,CAAAA,MAAM,CAACC,GAAD,CAAf,EALd,CAME,WAAW,CAAEW,cAAc,EAN7B,EAfF,GADF,EADF,EADF,CA8BD,CAED,cAAezB,CAAAA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport { Header, Keyboard, Puzzles, EndScreen } from './components';\nimport { checkValidity } from './util/checkValidity';\nimport { generateWordlist } from './util/generateWordlist';\nimport { sortByValue } from './util/sortByValue';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  background-color: #f7f8f9;\n`;\n\nconst Content = styled.div`\n  max-width: 600px;\n  box-shadow: 4px 4px 40px 4px rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n  margin-bottom: 200px;\n`;\n\nfunction App() {\n  const totalWords = 1000;\n  const [wordlist, setWordlist] = useState(generateWordlist(totalWords));\n  const [guesslist, setGuesslist] = useState<string[]>([]);\n  const [progressHistory, setProgressHistory] = useState<number[]>([]);\n  const [working, setWorking] = useState('');\n\n  const maxGuesses = 1005;\n  const expired = guesslist.length >= maxGuesses;\n\n  function addKey(key: string) {\n    if (key === '-' || key === 'Backspace')\n      setWorking((tmp) => tmp.slice(0, tmp.length - 1));\n    else if (\n      (key === '+' || key === 'Enter') &&\n      working.length === 5 &&\n      checkValidity(working)\n    ) {\n      // lets go.\n      const newGuesslist = guesslist.concat([working]);\n      setGuesslist(newGuesslist);\n      setWorking('');\n      setWordlist(sortByValue(wordlist, newGuesslist));\n      setProgressHistory(\n        progressHistory.concat([totalWords - (wordlist.length - 1)])\n      );\n    } else if (working.length !== 5 && key.length === 1 && key !== ' ') {\n      setWorking((tmp) => tmp + key.toLowerCase());\n    }\n  }\n\n  useEffect(() => {\n    setWordlist(sortByValue(wordlist, guesslist));\n  }, []);\n\n  useEffect(() => {\n    function keyEvent(ev: KeyboardEvent) {\n      addKey(ev.key);\n    }\n    if (!expired) {\n      window.addEventListener('keydown', keyEvent);\n      if (working.length > 5) setWorking((tmp) => tmp.slice(0, 5));\n      return () => window.removeEventListener('keydown', keyEvent);\n    }\n  }, [working]);\n\n  function getUsedLetters() {\n    var letters: string[] = [];\n    guesslist.forEach((word) => {\n      for (var i = 0; i < word.length; i++) {\n        var char = word.charAt(i);\n        if (letters.indexOf(char) === -1) letters.push(char);\n      }\n    });\n    return letters;\n  }\n\n  // const endScreenDemo = true;\n  // useEffect(() => {\n  //   if (endScreenDemo) {\n  //     let fakeProgressHistory = [];\n  //     let progress = 0;\n  //     while (progress < 1000) {\n  //       progress += Math.floor(Math.random() * 10);\n  //       fakeProgressHistory.push(progress);\n  //     }\n  //     setProgressHistory(fakeProgressHistory);\n  //     setWordlist([]);\n  //     setGuesslist(Array(fakeProgressHistory.length).fill('placeholder'));\n  //   }\n  // }, []);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Content>\n          <Header\n            remaining={wordlist.length}\n            guesses={guesslist.length}\n            limit={maxGuesses}\n          />\n          <Puzzles\n            expired={expired}\n            wordlist={wordlist}\n            working={working}\n            guesslist={guesslist}\n          />\n          {wordlist.length === 0 ? (\n            <EndScreen progressHistory={progressHistory} />\n          ) : null}\n          <Keyboard\n            guesses={guesslist.length}\n            remaining={wordlist.length}\n            limit={maxGuesses}\n            expired={expired}\n            onKeyPress={(key) => addKey(key)}\n            usedLetters={getUsedLetters()}\n          />\n        </Content>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}