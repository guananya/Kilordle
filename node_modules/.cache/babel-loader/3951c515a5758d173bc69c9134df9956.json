{"ast":null,"code":"var _jsxFileName = \"/Users/ananyagupta/Desktop/kilordle/src/components/Puzzle.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { checkValidity } from '../util/checkValidity';\nimport { isYellow } from '../util/isYellow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 2px;\n  margin: 2px;\n  border: 1px solid rgba(0,0,0,0.1);\n`;\n_c = Container;\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n_c2 = Row;\nconst Letter = styled.div`\n  display: flex;\n  width: 20px;\n  height: 20px;\n  border: 1px solid rgba(0,0,0,0.3);\n  border-radius: 5px;\n  background-color: #F7F8F9;\n  align-items: center;\n  justify-content: center;\n  ${_ref => {\n  let {\n    yellow\n  } = _ref;\n  return yellow && `\n    background-color: #EEDE23;  \n  `;\n}}\n  ${_ref2 => {\n  let {\n    green\n  } = _ref2;\n  return green && `\n    background-color: #22EE33;  \n  `;\n}}\n  ${_ref3 => {\n  let {\n    red\n  } = _ref3;\n  return red && `\n    background-color: #DE5956;\n  `;\n}}\n`;\n_c3 = Letter;\n\nfunction Puzzle(_ref4) {\n  let {\n    expired,\n    wordle,\n    working,\n    guesslist\n  } = _ref4;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [guesslist.map((guess, gnum) => /*#__PURE__*/_jsxDEV(Row, {\n      children: guess.split('').map((letter, i) => /*#__PURE__*/_jsxDEV(Letter, {\n        green: letter === wordle[i],\n        yellow: isYellow(wordle, guess, i),\n        children: letter\n      }, `${letter}${i},${gnum}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, guess, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)), !expired && /*#__PURE__*/_jsxDEV(Row, {\n      children: [working.split('').map((letter, i) => /*#__PURE__*/_jsxDEV(Letter, {\n        red: working.length === 5 && !checkValidity(working),\n        children: letter\n      }, `${letter}${i}W`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)), working.length <= 5 && Array.from(Array(5 - working.length)).map((e, i) => /*#__PURE__*/_jsxDEV(Letter, {\n        children: \" \"\n      }, `empty-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 85\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 3\n  }, this);\n}\n\n_c4 = Puzzle;\nexport default Puzzle;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Row\");\n$RefreshReg$(_c3, \"Letter\");\n$RefreshReg$(_c4, \"Puzzle\");","map":{"version":3,"sources":["/Users/ananyagupta/Desktop/kilordle/src/components/Puzzle.tsx"],"names":["React","styled","checkValidity","isYellow","Container","div","Row","Letter","yellow","green","red","Puzzle","expired","wordle","working","guesslist","map","guess","gnum","split","letter","i","length","Array","from","e"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;;AAEA,MAAMC,SAAS,GAAGH,MAAM,CAACI,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,CANA;KAAMD,S;AAQN,MAAME,GAAG,GAAGL,MAAM,CAACI,GAAI;AACvB;AACA;AACA,CAHA;MAAMC,G;AAKN,MAAMC,MAAM,GAAGN,MAAM,CAACI,GAA0D;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AAAA,MAAC;AAAEG,IAAAA;AAAF,GAAD;AAAA,SAAgBA,MAAM,IAAK;AAC/B;AACA,GAFI;AAAA,CAEA;AACJ,IAAI;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,SAAeA,KAAK,IAAK;AAC7B;AACA,GAFI;AAAA,CAEA;AACJ,IAAI;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,SAAaA,GAAG,IAAK;AACzB;AACA,GAFI;AAAA,CAEA;AACJ,CAlBA;MAAMH,M;;AAoBN,SAASI,MAAT,QAUG;AAAA,MAVa;AACdC,IAAAA,OADc;AAEdC,IAAAA,MAFc;AAGdC,IAAAA,OAHc;AAIdC,IAAAA;AAJc,GAUb;AACD,sBACA,QAAC,SAAD;AAAA,eACGA,SAAS,CAACC,GAAV,CAAc,CAACC,KAAD,EAAQC,IAAR,kBACb,QAAC,GAAD;AAAA,gBACGD,KAAK,CAACE,KAAN,CAAY,EAAZ,EAAgBH,GAAhB,CAAoB,CAACI,MAAD,EAASC,CAAT,kBACnB,QAAC,MAAD;AAAsC,QAAA,KAAK,EAAED,MAAM,KAAKP,MAAM,CAACQ,CAAD,CAA9D;AAAmE,QAAA,MAAM,EAAElB,QAAQ,CAACU,MAAD,EAASI,KAAT,EAAgBI,CAAhB,CAAnF;AAAA,kBAAwGD;AAAxG,SAAc,GAAEA,MAAO,GAAEC,CAAE,IAAGH,IAAK,EAAnC;AAAA;AAAA;AAAA;AAAA,cADD;AADH,OAAUD,KAAV;AAAA;AAAA;AAAA;AAAA,YADD,CADH,EAQG,CAACL,OAAD,iBACC,QAAC,GAAD;AAAA,iBACGE,OAAO,CAACK,KAAR,CAAc,EAAd,EAAkBH,GAAlB,CAAsB,CAACI,MAAD,EAASC,CAAT,kBACrB,QAAC,MAAD;AAAQ,QAAA,GAAG,EAAEP,OAAO,CAACQ,MAAR,KAAmB,CAAnB,IAAwB,CAACpB,aAAa,CAACY,OAAD,CAAnD;AAAA,kBAAsFM;AAAtF,SAAoE,GAAEA,MAAO,GAAEC,CAAE,GAAjF;AAAA;AAAA;AAAA;AAAA,cADD,CADH,EAIGP,OAAO,CAACQ,MAAR,IAAkB,CAAlB,IAAuBC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,IAAIT,OAAO,CAACQ,MAAb,CAAhB,EAAsCN,GAAtC,CAA0C,CAACS,CAAD,EAAIJ,CAAJ,kBAAU,QAAC,MAAD;AAAA;AAAA,SAAc,SAAQA,CAAE,EAAxB;AAAA;AAAA;AAAA;AAAA,cAApD,CAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAmBD;;MA9BQV,M;AAgCT,eAAeA,MAAf","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { checkValidity } from '../util/checkValidity';\nimport { isYellow } from '../util/isYellow';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 2px;\n  margin: 2px;\n  border: 1px solid rgba(0,0,0,0.1);\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Letter = styled.div<{ green?: boolean, yellow?: boolean, red?: boolean }>`\n  display: flex;\n  width: 20px;\n  height: 20px;\n  border: 1px solid rgba(0,0,0,0.3);\n  border-radius: 5px;\n  background-color: #F7F8F9;\n  align-items: center;\n  justify-content: center;\n  ${({ yellow }) => yellow && `\n    background-color: #EEDE23;  \n  `}\n  ${({ green }) => green && `\n    background-color: #22EE33;  \n  `}\n  ${({ red }) => red && `\n    background-color: #DE5956;\n  `}\n`;\n\nfunction Puzzle({\n  expired,\n  wordle,\n  working,\n  guesslist,\n}: {\n  expired: boolean,\n  wordle: string;\n  working: string;\n  guesslist: string[];\n}) {\n  return (\n  <Container>\n    {guesslist.map((guess, gnum) => (\n      <Row key={guess}>\n        {guess.split('').map((letter, i) => (\n          <Letter key={`${letter}${i},${gnum}`} green={letter === wordle[i]} yellow={isYellow(wordle, guess, i)}>{letter}</Letter>\n        ))}\n      </Row>\n    ))}\n    {!expired && \n      <Row>\n        {working.split('').map((letter, i) => (\n          <Letter red={working.length === 5 && !checkValidity(working)} key={`${letter}${i}W`}>{letter}</Letter>\n        ))}\n        {working.length <= 5 && Array.from(Array(5 - working.length)).map((e, i) => <Letter key={`empty-${i}`}> </Letter>)}\n      </Row>\n    }\n  </Container>\n  );\n}\n\nexport default Puzzle;\n"]},"metadata":{},"sourceType":"module"}