{"ast":null,"code":"var _jsxFileName = \"/Users/ananyagupta/Desktop/kilordle/src/components/EndScreen.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ShareButton = styled.button`\n  margin: 10px 0;\n  background-color: #0fb30f;\n  color: white;\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  border-radius: 5px;\n  outline: none;\n  font-size: 1.5em;\n  cursor: pointer;\n  box-shadow: 0 1px 5px 1px rgba(0, 0, 0, 0.1);\n\n  :hover {\n    opacity: 0.6;\n  }\n\n  &:active {\n    color: lightgray;\n  }\n`;\n_c = ShareButton;\n\nfunction EndScreen(_ref) {\n  _s();\n\n  let {\n    progressHistory\n  } = _ref;\n  const guesses = progressHistory.length;\n  const [canvasURL, setCanvasURL] = useState('');\n  const canvasResult = useRef(null);\n  const displayWidth = 525;\n  const titleHeight = 20;\n  const displayHeight = 250 + titleHeight;\n  const maxColumns = 50;\n  const actualColumns = Math.min(maxColumns, guesses);\n  const rows = 25;\n  const mmts = {\n    // measurements\n    height: displayHeight,\n    nonTitleHeight: displayHeight - titleHeight,\n    width: displayWidth,\n    leftGutter: 30,\n    bottomGutter: 15,\n    margin: 3,\n    lineWidth: 1,\n    fontSize: 10,\n    gridLeftEdge: 0,\n    gridWidth: 0,\n    gridBottomEdge: 0,\n    gridHeight: 0,\n    squareSide: 0,\n    squarePadding: 1\n  };\n  mmts.gridLeftEdge = mmts.leftGutter + mmts.lineWidth + mmts.margin / 2;\n  mmts.gridBottomEdge = mmts.bottomGutter + mmts.lineWidth;\n  mmts.gridWidth = mmts.width - mmts.leftGutter - mmts.leftGutter / 2 - mmts.margin;\n  mmts.gridHeight = mmts.nonTitleHeight - mmts.gridBottomEdge;\n  mmts.squareSide = mmts.gridHeight / rows; // scale adjustment\n\n  let mmt;\n\n  for (mmt in mmts) {\n    mmts[mmt] *= devicePixelRatio * 2;\n  }\n\n  useEffect(() => {\n    const canvas = document.createElement('canvas');\n    if (!canvas) return;\n    canvas.width = mmts.width;\n    canvas.height = mmts.height;\n    const context = canvas.getContext('2d');\n    if (!context) return;\n    console.log('drawing to canvas');\n    console.log('progress history is', progressHistory); // draw background (white)\n\n    context.fillStyle = '#ffffff';\n    context.fillRect(0, 0, canvas.width, canvas.height); // create margin\n\n    context.scale(0.95, 0.95);\n    context.translate(0.025 * mmts.width, 0.025 * mmts.height); // create title\n\n    context.fillStyle = '#000000';\n    context.textAlign = 'center';\n    context.textBaseline = 'top';\n    context.font = `${mmts.fontSize * 1.5}px sans-serif`;\n    context.fillText(`I beat Kilordle in ${guesses} guesses :')`, mmts.width / 2, 0);\n    context.translate(0, mmts.fontSize * 1.5); // setup fonts, colors\n\n    context.font = `${mmts.fontSize}px sans-serif`; // draw numbers\n\n    context.textBaseline = 'alphabetic';\n    context.textAlign = 'right';\n    context.fillText('0', mmts.leftGutter - mmts.margin, mmts.nonTitleHeight - mmts.margin);\n    context.textBaseline = 'top';\n    context.fillText('1000', mmts.leftGutter - mmts.margin, mmts.margin);\n    context.textBaseline = 'alphabetic';\n    context.textAlign = 'center';\n    context.fillText(String(guesses), mmts.gridLeftEdge + actualColumns * mmts.squareSide + mmts.squarePadding - mmts.squareSide / 2, mmts.nonTitleHeight - mmts.margin); // draw axes\n\n    context.fillRect(mmts.leftGutter, 0, mmts.lineWidth, mmts.nonTitleHeight);\n    context.fillRect(mmts.leftGutter / 2, mmts.nonTitleHeight - mmts.bottomGutter, mmts.width - mmts.leftGutter, mmts.lineWidth); // draw url of site\n\n    context.textBaseline = 'middle';\n    context.textAlign = 'center';\n    context.font = `${mmts.fontSize * 1.25}px sans-serif`;\n    context.fillText('https://jonesnxt.github.io/kilordle/', mmts.leftGutter + mmts.gridWidth / 2, mmts.nonTitleHeight - mmts.margin); // draw grid of squares\n\n    context.fillStyle = '#0fb30f';\n    const drawnSquareSide = mmts.squareSide - mmts.squarePadding * 2;\n    const finalHeight = progressHistory[progressHistory.length - 1];\n\n    for (let x = 0; x < actualColumns; x++) {\n      const wordsGotten = progressHistory[Math.floor(guesses * (x / actualColumns))];\n      const columnSquares = Math.round(wordsGotten * (rows / finalHeight));\n\n      for (let y = rows; y > rows - columnSquares; y--) {\n        const xPos = mmts.gridLeftEdge + x * mmts.squareSide + mmts.squarePadding;\n        const yPos = (y - 1) * mmts.squareSide + mmts.squarePadding;\n        context.fillRect(xPos, yPos, drawnSquareSide, drawnSquareSide);\n      }\n    }\n\n    canvas.toBlob(blob => {\n      if (blob) {\n        let oldCanvasURL = canvasURL;\n        setCanvasURL(URL.createObjectURL(blob));\n        canvasResult.current = blob;\n        URL.revokeObjectURL(oldCanvasURL);\n      }\n    });\n  }, [progressHistory]);\n  const [buttonText, setButtonText] = useState('Share Results');\n\n  const shareResults = () => {\n    if (canvasResult.current) {\n      try {\n        navigator.clipboard.write([new ClipboardItem({\n          [canvasResult.current.type]: canvasResult.current\n        })]).then(() => {\n          setButtonText('Copied to clipboard');\n        });\n      } catch {\n        const dl = document.createElement('a');\n        dl.download = 'kilordle.png';\n        dl.href = canvasURL;\n        dl.click();\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: canvasURL,\n      alt: \"Congratulations, you have beaten Kilordle!\",\n      style: {\n        width: displayWidth,\n        maxWidth: '95%',\n        height: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ShareButton, {\n      onClick: shareResults,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(EndScreen, \"EmF8ekYGemsrqHWKU+2tOs1ZgRs=\");\n\n_c2 = EndScreen;\nexport default EndScreen;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ShareButton\");\n$RefreshReg$(_c2, \"EndScreen\");","map":{"version":3,"sources":["/Users/ananyagupta/Desktop/kilordle/src/components/EndScreen.tsx"],"names":["React","useEffect","useRef","useState","styled","ShareButton","button","EndScreen","progressHistory","guesses","length","canvasURL","setCanvasURL","canvasResult","displayWidth","titleHeight","displayHeight","maxColumns","actualColumns","Math","min","rows","mmts","height","nonTitleHeight","width","leftGutter","bottomGutter","margin","lineWidth","fontSize","gridLeftEdge","gridWidth","gridBottomEdge","gridHeight","squareSide","squarePadding","mmt","devicePixelRatio","canvas","document","createElement","context","getContext","console","log","fillStyle","fillRect","scale","translate","textAlign","textBaseline","font","fillText","String","drawnSquareSide","finalHeight","x","wordsGotten","floor","columnSquares","round","y","xPos","yPos","toBlob","blob","oldCanvasURL","URL","createObjectURL","current","revokeObjectURL","buttonText","setButtonText","shareResults","navigator","clipboard","write","ClipboardItem","type","then","dl","download","href","click","maxWidth"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nconst ShareButton = styled.button`\n  margin: 10px 0;\n  background-color: #0fb30f;\n  color: white;\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  border-radius: 5px;\n  outline: none;\n  font-size: 1.5em;\n  cursor: pointer;\n  box-shadow: 0 1px 5px 1px rgba(0, 0, 0, 0.1);\n\n  :hover {\n    opacity: 0.6;\n  }\n\n  &:active {\n    color: lightgray;\n  }\n`;\n\nfunction EndScreen({ progressHistory }: { progressHistory: number[] }) {\n  const guesses = progressHistory.length;\n  const [canvasURL, setCanvasURL] = useState('');\n  const canvasResult = useRef<Blob | null>(null);\n\n  const displayWidth = 525;\n  const titleHeight = 20;\n  const displayHeight = 250 + titleHeight;\n  const maxColumns = 50;\n  const actualColumns = Math.min(maxColumns, guesses);\n  const rows = 25;\n\n  const mmts = {\n    // measurements\n    height: displayHeight,\n    nonTitleHeight: displayHeight - titleHeight,\n    width: displayWidth,\n    leftGutter: 30,\n    bottomGutter: 15,\n    margin: 3,\n    lineWidth: 1,\n    fontSize: 10,\n    gridLeftEdge: 0,\n    gridWidth: 0,\n    gridBottomEdge: 0,\n    gridHeight: 0,\n    squareSide: 0,\n    squarePadding: 1,\n  };\n  mmts.gridLeftEdge = mmts.leftGutter + mmts.lineWidth + mmts.margin / 2;\n  mmts.gridBottomEdge = mmts.bottomGutter + mmts.lineWidth;\n  mmts.gridWidth =\n    mmts.width - mmts.leftGutter - mmts.leftGutter / 2 - mmts.margin;\n  mmts.gridHeight = mmts.nonTitleHeight - mmts.gridBottomEdge;\n  mmts.squareSide = mmts.gridHeight / rows;\n\n  // scale adjustment\n  let mmt: keyof typeof mmts;\n  for (mmt in mmts) {\n    mmts[mmt] *= devicePixelRatio * 2;\n  }\n\n  useEffect(() => {\n    const canvas = document.createElement('canvas');\n    if (!canvas) return;\n    canvas.width = mmts.width;\n    canvas.height = mmts.height;\n    const context = canvas.getContext('2d');\n    if (!context) return;\n    console.log('drawing to canvas');\n    console.log('progress history is', progressHistory);\n    // draw background (white)\n    context.fillStyle = '#ffffff';\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    // create margin\n    context.scale(0.95, 0.95);\n    context.translate(0.025 * mmts.width, 0.025 * mmts.height);\n    // create title\n    context.fillStyle = '#000000';\n    context.textAlign = 'center';\n    context.textBaseline = 'top';\n    context.font = `${mmts.fontSize * 1.5}px sans-serif`;\n    context.fillText(\n      `I beat Kilordle in ${guesses} guesses :')`,\n      mmts.width / 2,\n      0\n    );\n    context.translate(0, mmts.fontSize * 1.5);\n    // setup fonts, colors\n    context.font = `${mmts.fontSize}px sans-serif`;\n    // draw numbers\n    context.textBaseline = 'alphabetic';\n    context.textAlign = 'right';\n    context.fillText(\n      '0',\n      mmts.leftGutter - mmts.margin,\n      mmts.nonTitleHeight - mmts.margin\n    );\n    context.textBaseline = 'top';\n    context.fillText('1000', mmts.leftGutter - mmts.margin, mmts.margin);\n    context.textBaseline = 'alphabetic';\n    context.textAlign = 'center';\n    context.fillText(\n      String(guesses),\n      mmts.gridLeftEdge +\n        actualColumns * mmts.squareSide +\n        mmts.squarePadding -\n        mmts.squareSide / 2,\n      mmts.nonTitleHeight - mmts.margin\n    );\n    // draw axes\n    context.fillRect(mmts.leftGutter, 0, mmts.lineWidth, mmts.nonTitleHeight);\n    context.fillRect(\n      mmts.leftGutter / 2,\n      mmts.nonTitleHeight - mmts.bottomGutter,\n      mmts.width - mmts.leftGutter,\n      mmts.lineWidth\n    );\n    // draw url of site\n    context.textBaseline = 'middle';\n    context.textAlign = 'center';\n    context.font = `${mmts.fontSize * 1.25}px sans-serif`;\n    context.fillText(\n      'https://jonesnxt.github.io/kilordle/',\n      mmts.leftGutter + mmts.gridWidth / 2,\n      mmts.nonTitleHeight - mmts.margin\n    );\n    // draw grid of squares\n    context.fillStyle = '#0fb30f';\n    const drawnSquareSide = mmts.squareSide - mmts.squarePadding * 2;\n    const finalHeight = progressHistory[progressHistory.length - 1];\n    for (let x = 0; x < actualColumns; x++) {\n      const wordsGotten =\n        progressHistory[Math.floor(guesses * (x / actualColumns))];\n      const columnSquares = Math.round(wordsGotten * (rows / finalHeight));\n      for (let y = rows; y > rows - columnSquares; y--) {\n        const xPos =\n          mmts.gridLeftEdge + x * mmts.squareSide + mmts.squarePadding;\n        const yPos = (y - 1) * mmts.squareSide + mmts.squarePadding;\n        context.fillRect(xPos, yPos, drawnSquareSide, drawnSquareSide);\n      }\n    }\n    canvas.toBlob((blob) => {\n      if (blob) {\n        let oldCanvasURL = canvasURL;\n        setCanvasURL(URL.createObjectURL(blob));\n        canvasResult.current = blob;\n        URL.revokeObjectURL(oldCanvasURL);\n      }\n    });\n  }, [progressHistory]);\n  const [buttonText, setButtonText] = useState('Share Results');\n  const shareResults = () => {\n    if (canvasResult.current) {\n      try {\n        navigator.clipboard\n          .write([\n            new ClipboardItem({\n              [canvasResult.current.type]: canvasResult.current,\n            }),\n          ])\n          .then(() => {\n            setButtonText('Copied to clipboard');\n          });\n      } catch {\n        const dl = document.createElement('a');\n        dl.download = 'kilordle.png';\n        dl.href = canvasURL;\n        dl.click();\n      }\n    }\n  };\n  return (\n    <>\n      <img\n        src={canvasURL}\n        alt=\"Congratulations, you have beaten Kilordle!\"\n        style={{ width: displayWidth, maxWidth: '95%', height: 'auto' }}\n      />\n      <ShareButton onClick={shareResults}>{buttonText}</ShareButton>\n    </>\n  );\n}\n\nexport default EndScreen;\n"]},"metadata":{},"sourceType":"module"}